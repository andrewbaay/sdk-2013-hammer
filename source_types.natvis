<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="Color">
    <DisplayString>{{ r = {(int)_color[0]}, g = {(int)_color[1]}, b = {(int)_color[2]}, a = {(int)_color[3]} }}</DisplayString>
    <Expand>
      <Item Name="[r]">(int)_color[0]</Item>
      <Item Name="[g]">(int)_color[1]</Item>
      <Item Name="[b]">(int)_color[2]</Item>
      <Item Name="[a]">(int)_color[3]</Item>
    </Expand>
  </Type>
  <Type Name="Vector">
    <DisplayString>{{ x = {x}, y = {y}, z = {z} }}</DisplayString>
  </Type>
  <Type Name="Vector2D">
    <DisplayString>{{ x = {x}, y = {y} }}</DisplayString>
  </Type>
  <Type Name="Vector4D">
    <DisplayString>{{ x = {x}, y = {y}, z = {z}, w = {w} }}</DisplayString>
  </Type>
  <Type Name="QAngle">
    <DisplayString>{{ x = {x}, y = {y}, z = {z} }}</DisplayString>
  </Type>
  <Type Name="RadianEuler">
    <DisplayString>{{ degrees = {x*57.29578} {y*57.29578} {z*57.29578} }}</DisplayString>
  </Type>
  <Type Name="CUtlVector&lt;*, CUtlMemory&lt;*&gt;&gt;" Inheritable="true">
    <DisplayString>{{ size = {m_Size} }}</DisplayString>
    <Expand>
      <Item Name="[size]">m_Size</Item>
      <Item Name="[allocated]">m_Memory.m_nAllocationCount</Item>
      <ArrayItems>
        <Size>m_Size</Size>
        <ValuePointer>m_Memory.m_pMemory</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="CUtlBlockVector&lt;*&gt;" Inheritable="true">
    <DisplayString>{{ size = {m_Size} }}</DisplayString>
    <Expand>
      <Item Name="[size]">m_Size</Item>
      <Item Name="[allocated]">m_Memory.m_nBlocks * (m_Memory.m_nIndexMask + 1)</Item>
      <IndexListItems>
        <Size>m_Size</Size>
        <ValueNode>m_Memory.m_pMemory[$i &gt;&gt; m_Memory.m_nIndexShift][$i &amp; m_Memory.m_nIndexMask]</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>
  <Type Name="SendProp">
    <DisplayString>{m_pVarName,s}</DisplayString>
  </Type>
  <Type Name="RecvProp">
    <DisplayString>{m_pVarName,s}</DisplayString>
  </Type>
  <Type Name="SendTable">
    <DisplayString>{m_pNetTableName,s}</DisplayString>
  </Type>
  <Type Name="RecvTable">
    <DisplayString>{m_pNetTableName,s}</DisplayString>
  </Type>
  <Type Name="CNetworkVarBase&lt;*&gt;" Inheritable="true">
    <DisplayString>{m_Value}</DisplayString>
  </Type>
  <Type Name="CNetworkColor32Base&lt;*&gt;" Inheritable="true">
    <DisplayString>{m_Value}</DisplayString>
  </Type>
  <Type Name="CNetworkHandleBase&lt;*&gt;" Inheritable="true">
    <DisplayString>{m_Value}</DisplayString>
  </Type>
  <Type Name="CNetworkVectorBase&lt;*&gt;" Inheritable="true">
    <DisplayString>{{ x = {m_Value.x}, y = {m_Value.y}, z = {m_Value.z} }}</DisplayString>
  </Type>
  <Type Name="CBaseHandle">
    <DisplayString>{{ index = {m_Index&amp;4093}, serial={m_Index>>12} }}</DisplayString>
  </Type>
  <Type Name="CGameTrace">
    <DisplayString>{{ fraction {fraction}, start {startpos.x} {startpos.y} {startpos.z}, end {endpos.x} {endpos.y} {endpos.z} }}</DisplayString>
  </Type>
  <Type Name="ConVar">
    <DisplayString>{{ name = {m_pParent->m_pszName,s}, value = {m_pParent->m_pszString,s} }}</DisplayString>
    <Expand>
      <Item Name="[value]" Condition="(m_pParent->m_nFlags &amp; (1 &lt;&lt; 12)) == 0">m_pParent->m_pszString,s</Item>
      <Item Name="[value]" Condition="(m_pParent->m_nFlags &amp; (1 &lt;&lt; 12)) != 0">m_pParent->m_nValue</Item>
      <Item Name="[default]">m_pParent->m_pszDefaultValue,s</Item>
      <Item Name="[flags]">m_pParent->m_nFlags</Item>
      <Item Name="[callback]" Condition="m_pParent->m_fnChangeCallback != nullptr">m_pParent->m_fnChangeCallback</Item>
      <Item Name="[min]" Condition="m_pParent->m_bHasMin">m_pParent->m_fMinVal</Item>
      <Item Name="[max]" Condition="m_pParent->m_bHasMax">m_pParent->m_fMaxVal</Item>
    </Expand>
  </Type>
  <Type Name="ConVarRef">
    <DisplayString>{{ name = {m_pConVarState->m_pszName,s}, value = {m_pConVarState->m_pszString,s} }}</DisplayString>
    <Expand>
      <ExpandedItem>m_pConVarState</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="CSteamID">
    <DisplayString>{{ id = { m_steamid.m_unAll64Bits } type = { m_steamid.m_comp.m_EAccountType } }}</DisplayString>
  </Type>
  <Type Name="IGameEvent">
    <Expand>
      <Item Name="KeyValues">*(KeyValues**)(((unsigned char*)(this))+8),na</Item>
    </Expand>
  </Type>
  <Type Name="CUtlString">
    <DisplayString>{m_pString,s}</DisplayString>
    <StringView>m_pString</StringView>
  </Type>
  <Type Name="CUtlRBTree&lt;*,*,*,*&gt;">
    <DisplayString>{{size = {m_NumElements}}}</DisplayString>
    <Expand>
      <Item Name="[size]">m_NumElements</Item>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"></Variable>
        <Size>m_NumElements</Size>
        <Loop>
          <Item Condition="m_Elements.m_pMemory[i].m_Left != i">m_Elements.m_pMemory[i].m_Data,na</Item>
          <Exec>i++</Exec>
          <Break Condition="i &gt;= m_Elements.m_nAllocationCount"/>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="CUtlMap&lt;*,*,*&gt;" Inheritable="true">
    <DisplayString>{{size = {m_Tree.m_NumElements}}}</DisplayString>
    <Expand>
      <Item Name="[size]">m_Tree.m_NumElements</Item>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"/>
        <Size>m_Tree.m_NumElements</Size>
        <Loop>
          <Item Condition="m_Tree.m_Elements.m_pMemory[i].m_Left != i">m_Tree.m_Elements.m_pMemory[i].m_Data.elem,na</Item>
          <Exec>i++</Exec>
          <Break Condition="i &gt;= m_Tree.m_Elements.m_nAllocationCount"/>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="CUtlDict&lt;*,*&gt;" Inheritable="true">
    <DisplayString>{{size = {m_Elements.m_Tree.m_NumElements}}}</DisplayString>
    <Expand>
      <Item Name="[size]">m_Elements.m_Tree.m_NumElements</Item>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"/>
        <Size>m_Elements.m_Tree.m_NumElements</Size>
        <Loop>
          <Item Condition="m_Elements.m_Tree.m_Elements.m_pMemory[i].m_Left != i">m_Elements.m_Tree.m_Elements.m_pMemory[i].m_Data.elem,na</Item>
          <Exec>i++</Exec>
          <Break Condition="i &gt;= m_Elements.m_Tree.m_Elements.m_nAllocationCount"/>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="CUtlLinkedList&lt;*,*,*,*,*&gt;" Inheritable="true">
    <DisplayString>{{size = {m_ElementCount}}}</DisplayString>
    <Expand>
      <Item Name="[size]">m_ElementCount</Item>
      <Item Name="[allocated]">m_NumAlloced</Item>
      <CustomListItems>
        <Variable Name="i" InitialValue="m_Head"/>
        <Size>m_ElementCount</Size>
        <Loop>
          <Item>m_Memory.m_pMemory[i].m_Element, na</Item>
          <Exec>i = m_Memory.m_pMemory[i].m_Next</Exec>
          <Break Condition="i == m_Memory.INVALID_INDEX"/>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="KeyValues">
    <DisplayString Condition="m_iDataType == TYPE_NONE">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_STRING">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={m_sValue,s}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_INT">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={m_iValue}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_FLOAT">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={m_flValue}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_PTR">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={m_pValue}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_WSTRING">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={m_wsValue,su}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_COLOR">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={*(Color*)&amp;m_Color}}}</DisplayString>
    <DisplayString Condition="m_iDataType == TYPE_UINT64">{{name = {s_pfGetStringForSymbol( m_iKeyName ),s} value={*(unsigned long long*)m_sValue}}}</DisplayString>
    <Expand>
      <Item Name="[peer]" Condition="m_pPeer != nullptr">m_pPeer</Item>
      <Item Name="[chain]" Condition="m_pChain != nullptr">m_pChain</Item>
      <Synthetic Name="[value]" Condition="m_iDataType == TYPE_NONE &amp;&amp; m_pSub == nullptr">
        <DisplayString>[empty]</DisplayString>
      </Synthetic>
      <Item Name="[value]" Condition="m_iDataType == TYPE_NONE &amp;&amp; m_pSub != nullptr">m_pSub</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_STRING">m_sValue,s</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_INT">m_iValue</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_FLOAT">m_flValue</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_PTR">m_pValue</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_WSTRING">m_wsValue,su</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_COLOR">*(Color*)&amp;m_Color</Item>
      <Item Name="[value]" Condition="m_iDataType == TYPE_UINT64">*(unsigned long long*)m_sValue</Item>
    </Expand>
  </Type>
  <Type Name="CUtlReference&lt;*&gt;">
    <DisplayString>{m_pObject}</DisplayString>
    <Expand>
      <Item Name="[object]">m_pObject</Item>
      <Item Name="[prev]" Condition="m_pPrev != nullptr">m_pPrev</Item>
      <Item Name="[next]" Condition="m_pNext != nullptr">m_pNext</Item>
    </Expand>
  </Type>
</AutoVisualizer>